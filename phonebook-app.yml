AWSTemplateFormatVersion: 2010-09-09
Description: |
  CloudFormation Template for Phonebook Application. This template creates Application Load Balancer 
  with Auto Scaling Group of Amazon Linux 2023  EC2 Instances which host Python Flask Web Application.
  EC2 instances are placed within WebServerSecurityGroup which allows http (80) connections only from ALBSecurityGroup,
  and allows tcp(3306) connections only within itself. RDS DB instance is placed within WebServerSecurityGroup 
  so that Database Server can communicate with Web Servers. Application Load Balancer is placed within ALBSecurityGroup 
  which allows http (80) and SSH (22)connections from anywhere. WebServerASG Auto Scaling Group is using the LT 
  Launch Template in order to spin up instances needed. LT Launch Template is configured to prepare Python Flask 
  environment on EC2, and to deploy Phonebook Application on Flask Server after downloading the app code 
  from Github repository.
Parameters:
  myVPC:
    Description: Select your VPC
    Type: AWS::EC2::VPC::Id

  latestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"

  myKeyPair:
    Description: Select your key pair
    Type: AWS::EC2::KeyPair::KeyName

  subnets:
    Description: Select your Subnets
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  autoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref launchTemplate
        Version: !GetAtt launchTemplate.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs:
        - !Ref targetGroup
      VPCZoneIdentifier: !Ref subnets # not array

  applicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - TargetGroupArn: !Ref targetGroup
          Type: forward
      LoadBalancerArn: !Ref applicationLoadBalancer # Required
      Port: 80 # Required
      Protocol: HTTP # Required

  applicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: phonebook-alb
      SecurityGroups:
        - !GetAtt applicationLoadBalancerSecurityGroup.GroupId
      Subnets: !Ref subnets
      Type: application

  launchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref latestAmiId
        InstanceType: t2.micro
        KeyName: !Ref myKeyPair
        SecurityGroupIds:
          - !GetAtt webServerSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName} Stack
        UserData:
          Fn::Base64: !Sub
            - |
              #! /bin/bash -x
              dnf update -y
              dnf install python3 -y
              dnf install python-pip -y
              pip3 install Flask==2.3.3
              pip3 install Flask-MySql
              dnf install git -y
              echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
              cd /home/ec2-user
              TOKEN="xxxxxxxxxxxxxxx"
              git clone https://$TOKEN@github.com/seydangulyesil/phonebook-web-app.git
              python3 /home/ec2-user/phonebook-web-app/phonebook-app.py
            - MyDBURI: !GetAtt dBInstance.Endpoint.Address

  targetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref myVPC

  dBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: phonebook-app
      DBName: seydan_phonebook
      DBSecurityGroups:
        - !Ref dBSecurityGroup
      Engine: mysql
      EngineVersion: 8.0.35
      MasterUserPassword: xxxxxxxxxx
      MasterUsername: admin
      Port: 3306
      PubliclyAccessible: true

  dBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      DBSecurityGroupIngress: # Required
        - EC2SecurityGroupId: !GetAtt webServerSecurityGroup.GroupId
      GroupDescription: Allows connection only from EC2 Web Server # Required

  webServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows connection only from ALB SecGrp # Required
      GroupName: webserver-SecGrp
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt applicationLoadBalancerSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref myVPC

  applicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH(22) and HTTP(80) connection # Required
      GroupName: ALB-SecGrp
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref myVPC
Outputs:
  WebsiteURL:
    Value: !Sub
      - http://${ALBAddress}
      - ALBAddress: !GetAtt applicationLoadBalancer.DNSName
    Description: Phonebook Application Load Balancer URL
